#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –ø–æ —Ñ–æ—Ç–æ
"""

import http.server
import socketserver
import os
import json
import base64
import mimetypes
from urllib.parse import urlparse, parse_qs
import cgi
import tempfile
import shutil

PORT = 3000

class PhotoSearchHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å
        if self.path == '/':
            self.path = '/public/index.html'
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if self.path.startswith('/public/'):
            file_path = self.path[1:]  # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
            if os.path.exists(file_path):
                self.send_file(file_path)
            else:
                self.send_error(404, "File not found")
        else:
            self.send_error(404, "Not found")

    def do_POST(self):
        if self.path == '/upload':
            self.handle_upload()
        else:
            self.send_error(404, "Not found")

    def handle_upload(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
            if not os.path.exists('uploads'):
                os.makedirs('uploads')

            # –ü–∞—Ä—Å–∏–º multipart –¥–∞–Ω–Ω—ã–µ
            form = cgi.FieldStorage(
                fp=self.rfile,
                headers=self.headers,
                environ={'REQUEST_METHOD': 'POST'}
            )

            if 'photo' in form:
                fileitem = form['photo']
                if fileitem.filename:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    filename = f"photo_{len(os.listdir('uploads')) + 1}.jpg"
                    filepath = os.path.join('uploads', filename)
                    
                    with open(filepath, 'wb') as f:
                        shutil.copyfileobj(fileitem.file, f)

                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                    results = self.simulate_search()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {
                        'success': True,
                        'originalImage': filename,
                        'processedImage': f"processed-{filename}",
                        'results': results
                    }
                    
                    self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                else:
                    self.send_error(400, "No file uploaded")
            else:
                self.send_error(400, "No photo field found")

        except Exception as e:
            print(f"Error handling upload: {e}")
            self.send_error(500, f"Internal server error: {str(e)}")

    def simulate_search(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ª—é–¥–µ–π –ø–æ —Ñ–æ—Ç–æ"""
        return [
            {
                "id": 1,
                "name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                "socialNetwork": "VKontakte",
                "profileUrl": "https://vk.com/anna_petrova",
                "similarity": 0.89,
                "avatar": "https://via.placeholder.com/50x50/4CAF50/FFFFFF?text=A"
            },
            {
                "id": 2,
                "name": "–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤",
                "socialNetwork": "Instagram",
                "profileUrl": "https://instagram.com/mikhail_sidorov",
                "similarity": 0.76,
                "avatar": "https://via.placeholder.com/50x50/2196F3/FFFFFF?text=M"
            },
            {
                "id": 3,
                "name": "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                "socialNetwork": "Facebook",
                "profileUrl": "https://facebook.com/elena.kozlov",
                "similarity": 0.72,
                "avatar": "https://via.placeholder.com/50x50/FF9800/FFFFFF?text=E"
            }
        ]

    def send_file(self, file_path):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(file_path)
            if mime_type is None:
                mime_type = 'application/octet-stream'
            
            self.send_response(200)
            self.send_header('Content-type', mime_type)
            self.send_header('Content-length', str(len(content)))
            self.end_headers()
            self.wfile.write(content)
            
        except Exception as e:
            print(f"Error sending file {file_path}: {e}")
            self.send_error(500, f"Error reading file: {str(e)}")

    def end_headers(self):
        """–î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight CORS –∑–∞–ø—Ä–æ—Å—ã"""
        self.send_response(200)
        self.end_headers()

def main():
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    with socketserver.TCPServer(("", PORT), PhotoSearchHandler) as httpd:
        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:{PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()


